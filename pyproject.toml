[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gravitational-wave-hunter"
version = "0.1.2"
description = "Deep learning framework for gravitational wave detection in open astronomical data"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Gravitational Wave Research Team"},
]
maintainers = [
    {name = "Gravitational Wave Research Team"},
]
keywords = [
    "gravitational-waves",
    "deep-learning",
    "pytorch",
    "astronomy",
    "ligo",
    "signal-processing",
    "physics"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "pandas>=1.3.0",
    "h5py>=3.0.0",
    "astropy>=5.0.0",
    "gwpy>=3.0.0",
    "pycbc>=2.0.0",
    "scikit-learn>=1.0.0",
    "tqdm>=4.60.0",
    "tensorboard>=2.8.0",
    "plotly>=5.0.0",
    "jupyter>=1.0.0",
    "ipywidgets>=7.6.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "isort>=5.10.0",
    "pre-commit>=2.20.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0",
    "myst-parser>=0.18.0"
]
gpu = [
    "torch[cuda]>=2.0.0"
]

[project.urls]
Homepage = "https://github.com/your-username/gravitational-wave-hunter"
Documentation = "https://gravitational-wave-hunter.readthedocs.io/"
Repository = "https://github.com/your-username/gravitational-wave-hunter"
"Bug Tracker" = "https://github.com/your-username/gravitational-wave-hunter/issues"

[project.scripts]
gw-train = "gravitational_wave_hunter.scripts.train:main"
gw-detect = "gravitational_wave_hunter.scripts.detect:main"
gw-evaluate = "gravitational_wave_hunter.scripts.evaluate:main"

[tool.setuptools.packages.find]
include = ["gravitational_wave_hunter*"]

[tool.setuptools.package-data]
gravitational_wave_hunter = ["data/*", "models/*"]



[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["gravitational_wave_hunter"]
known_third_party = ["torch", "numpy", "scipy", "matplotlib", "pandas", "astropy", "gwpy", "pycbc"]

[tool.mypy]
python_version = "0.1.2"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "gwpy.*",
    "pycbc.*",
    "astropy.*",
    "plotly.*",
    "seaborn.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=gravitational_wave_hunter",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU"
]

[tool.coverage.run]
source = ["gravitational_wave_hunter"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == '__main__':"
]
